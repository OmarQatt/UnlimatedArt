{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport valid from '../../../utils/valid';\nimport bcrypt from 'bcrypt';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await register(req, res);\n      break;\n  }\n});\n\nconst register = async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password,\n      cf_password\n    } = req.body;\n    const errMsg = valid(name, email, password, cf_password);\n    if (errMsg) return res.status(400).json({\n      err: errMsg\n    });\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(400).json({\n      err: 'This email already exists.'\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      name,\n      email,\n      password: passwordHash,\n      cf_password\n    });\n    await newUser.save();\n    res.json({\n      msg: \"Register Success!\"\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Users","valid","bcrypt","req","res","method","register","name","email","password","cf_password","body","errMsg","status","json","err","user","findOne","passwordHash","hash","newUser","save","msg","message"],"sources":["C:/Users/DELL/Desktop/nextjs-ecommerce-master/pages/api/auth/register.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Users from '../../../models/userModel'\nimport valid from '../../../utils/valid'\nimport bcrypt from 'bcrypt'\n\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"POST\":\n            await register(req, res)\n            break;\n    }\n}\n\nconst register = async (req, res) => {\n    try{\n        const { name, email, password, cf_password } = req.body\n\n        const errMsg = valid(name, email, password, cf_password)\n        if(errMsg) return res.status(400).json({err: errMsg})\n\n        const user = await Users.findOne({ email })\n        if(user) return res.status(400).json({err: 'This email already exists.'})\n\n        const passwordHash = await bcrypt.hash(password, 12)\n\n        const newUser = new Users({ \n            name, email, password: passwordHash, cf_password \n        })\n\n        await newUser.save()\n        res.json({msg: \"Register Success!\"})\n\n    }catch(err){\n        return res.status(500).json({err: err.message})\n    }\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;EAC/B,QAAOD,GAAG,CAACE,MAAX;IACI,KAAK,MAAL;MACI,MAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;MACA;EAHR;AAKH,CAND;;AAQA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;EACjC,IAAG;IACC,MAAM;MAAEG,IAAF;MAAQC,KAAR;MAAeC,QAAf;MAAyBC;IAAzB,IAAyCP,GAAG,CAACQ,IAAnD;IAEA,MAAMC,MAAM,GAAGX,KAAK,CAACM,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwBC,WAAxB,CAApB;IACA,IAAGE,MAAH,EAAW,OAAOR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAEH;IAAN,CAArB,CAAP;IAEX,MAAMI,IAAI,GAAG,MAAMhB,KAAK,CAACiB,OAAN,CAAc;MAAET;IAAF,CAAd,CAAnB;IACA,IAAGQ,IAAH,EAAS,OAAOZ,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAE;IAAN,CAArB,CAAP;IAET,MAAMG,YAAY,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYV,QAAZ,EAAsB,EAAtB,CAA3B;IAEA,MAAMW,OAAO,GAAG,IAAIpB,KAAJ,CAAU;MACtBO,IADsB;MAChBC,KADgB;MACTC,QAAQ,EAAES,YADD;MACeR;IADf,CAAV,CAAhB;IAIA,MAAMU,OAAO,CAACC,IAAR,EAAN;IACAjB,GAAG,CAACU,IAAJ,CAAS;MAACQ,GAAG,EAAE;IAAN,CAAT;EAEH,CAlBD,CAkBC,OAAMP,GAAN,EAAU;IACP,OAAOX,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAEA,GAAG,CAACQ;IAAV,CAArB,CAAP;EACH;AACJ,CAtBD"},"metadata":{},"sourceType":"module"}