{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Categories from '../../../models/categoriesModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createCategory(req, res);\n      break;\n\n    case \"GET\":\n      await getCategories(req, res);\n      break;\n  }\n});\n\nconst createCategory = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: \"Authentication is not valid.\"\n    });\n    const {\n      name\n    } = req.body;\n    if (!name) return res.status(400).json({\n      err: \"Name can not be left blank.\"\n    });\n    const newCategory = new Categories({\n      name\n    });\n    await newCategory.save();\n    res.json({\n      msg: 'Success! Created a new category.',\n      newCategory\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst getCategories = async (req, res) => {\n  try {\n    const categories = await Categories.find();\n    res.json({\n      categories\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Categories","auth","req","res","method","createCategory","getCategories","result","role","status","json","err","name","body","newCategory","save","msg","message","categories","find"],"sources":["C:/Users/DELL/Desktop/nextjs-ecommerce-master/pages/api/categories/index.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Categories from '../../../models/categoriesModel'\nimport auth from '../../../middleware/auth'\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"POST\":\n            await createCategory(req, res)\n            break;\n        case \"GET\":\n            await getCategories(req, res)\n            break;\n    }\n}\n\nconst createCategory = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        if(result.role !== 'admin')\n        return res.status(400).json({err: \"Authentication is not valid.\"})\n\n        const { name } = req.body\n        if(!name) return res.status(400).json({err: \"Name can not be left blank.\"})\n\n        const newCategory = new Categories({name})\n\n        await newCategory.save()\n        res.json({\n            msg: 'Success! Created a new category.',\n            newCategory\n        })\n\n    } catch (err) {\n        return res.status(500).json({err: err.message})\n    }\n}\n\nconst getCategories = async (req, res) => {\n    try {\n        const categories = await Categories.find()\n\n        res.json({categories})\n\n    } catch (err) {\n        return res.status(500).json({err: err.message})\n    }\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEAF,SAAS;AAET,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;EAC/B,QAAOD,GAAG,CAACE,MAAX;IACI,KAAK,MAAL;MACI,MAAMC,cAAc,CAACH,GAAD,EAAMC,GAAN,CAApB;MACA;;IACJ,KAAK,KAAL;MACI,MAAMG,aAAa,CAACJ,GAAD,EAAMC,GAAN,CAAnB;MACA;EANR;AAQH,CATD;;AAWA,MAAME,cAAc,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;EACvC,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;IACA,IAAGI,MAAM,CAACC,IAAP,KAAgB,OAAnB,EACA,OAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAE;IAAN,CAArB,CAAP;IAEA,MAAM;MAAEC;IAAF,IAAWV,GAAG,CAACW,IAArB;IACA,IAAG,CAACD,IAAJ,EAAU,OAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAE;IAAN,CAArB,CAAP;IAEV,MAAMG,WAAW,GAAG,IAAId,UAAJ,CAAe;MAACY;IAAD,CAAf,CAApB;IAEA,MAAME,WAAW,CAACC,IAAZ,EAAN;IACAZ,GAAG,CAACO,IAAJ,CAAS;MACLM,GAAG,EAAE,kCADA;MAELF;IAFK,CAAT;EAKH,CAhBD,CAgBE,OAAOH,GAAP,EAAY;IACV,OAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAEA,GAAG,CAACM;IAAV,CAArB,CAAP;EACH;AACJ,CApBD;;AAsBA,MAAMX,aAAa,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;EACtC,IAAI;IACA,MAAMe,UAAU,GAAG,MAAMlB,UAAU,CAACmB,IAAX,EAAzB;IAEAhB,GAAG,CAACO,IAAJ,CAAS;MAACQ;IAAD,CAAT;EAEH,CALD,CAKE,OAAOP,GAAP,EAAY;IACV,OAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAEA,GAAG,CAACM;IAAV,CAArB,CAAP;EACH;AACJ,CATD"},"metadata":{},"sourceType":"module"}