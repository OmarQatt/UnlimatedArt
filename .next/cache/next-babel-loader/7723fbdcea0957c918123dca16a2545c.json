{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport bcrypt from 'bcrypt';\nimport { createAccessToken, createRefreshToken } from '../../../utils/generateToken';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await login(req, res);\n      break;\n  }\n});\n\nconst login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await Users.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      err: 'This user does not exist.'\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      err: 'Incorrect password.'\n    });\n    const access_token = createAccessToken({\n      id: user._id\n    });\n    const refresh_token = createRefreshToken({\n      id: user._id\n    });\n    res.json({\n      msg: \"Login Success!\",\n      refresh_token,\n      access_token,\n      user: {\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        avatar: user.avatar,\n        root: user.root\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Users","bcrypt","createAccessToken","createRefreshToken","req","res","method","login","email","password","body","user","findOne","status","json","err","isMatch","compare","access_token","id","_id","refresh_token","msg","name","role","avatar","root","message"],"sources":["/home/omar/UnlimatedArt/pages/api/auth/login.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Users from '../../../models/userModel'\nimport bcrypt from 'bcrypt'\nimport { createAccessToken, createRefreshToken } from '../../../utils/generateToken'\n\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"POST\":\n            await login(req, res)\n            break;\n    }\n}\n\nconst login = async (req, res) => {\n    try{\n        const { email, password } = req.body\n\n        const user = await Users.findOne({ email })\n        if(!user) return res.status(400).json({err: 'This user does not exist.'})\n\n        const isMatch = await bcrypt.compare(password, user.password)\n        if(!isMatch) return res.status(400).json({err: 'Incorrect password.'})\n\n        const access_token = createAccessToken({id: user._id})\n        const refresh_token = createRefreshToken({id: user._id})\n        \n        res.json({\n            msg: \"Login Success!\",\n            refresh_token,\n            access_token,\n            user: {\n                name: user.name,\n                email: user.email,\n                role: user.role,\n                avatar: user.avatar,\n                root: user.root\n            }\n        })\n\n    }catch(err){\n        return res.status(500).json({err: err.message})\n    }\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,8BAAtD;AAGAJ,SAAS;AAET,gBAAe,OAAOK,GAAP,EAAYC,GAAZ,KAAoB;EAC/B,QAAOD,GAAG,CAACE,MAAX;IACI,KAAK,MAAL;MACI,MAAMC,KAAK,CAACH,GAAD,EAAMC,GAAN,CAAX;MACA;EAHR;AAKH,CAND;;AAQA,MAAME,KAAK,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;EAC9B,IAAG;IACC,MAAM;MAAEG,KAAF;MAASC;IAAT,IAAsBL,GAAG,CAACM,IAAhC;IAEA,MAAMC,IAAI,GAAG,MAAMX,KAAK,CAACY,OAAN,CAAc;MAAEJ;IAAF,CAAd,CAAnB;IACA,IAAG,CAACG,IAAJ,EAAU,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAE;IAAN,CAArB,CAAP;IAEV,MAAMC,OAAO,GAAG,MAAMf,MAAM,CAACgB,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAtB;IACA,IAAG,CAACO,OAAJ,EAAa,OAAOX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAE;IAAN,CAArB,CAAP;IAEb,MAAMG,YAAY,GAAGhB,iBAAiB,CAAC;MAACiB,EAAE,EAAER,IAAI,CAACS;IAAV,CAAD,CAAtC;IACA,MAAMC,aAAa,GAAGlB,kBAAkB,CAAC;MAACgB,EAAE,EAAER,IAAI,CAACS;IAAV,CAAD,CAAxC;IAEAf,GAAG,CAACS,IAAJ,CAAS;MACLQ,GAAG,EAAE,gBADA;MAELD,aAFK;MAGLH,YAHK;MAILP,IAAI,EAAE;QACFY,IAAI,EAAEZ,IAAI,CAACY,IADT;QAEFf,KAAK,EAAEG,IAAI,CAACH,KAFV;QAGFgB,IAAI,EAAEb,IAAI,CAACa,IAHT;QAIFC,MAAM,EAAEd,IAAI,CAACc,MAJX;QAKFC,IAAI,EAAEf,IAAI,CAACe;MALT;IAJD,CAAT;EAaH,CAzBD,CAyBC,OAAMX,GAAN,EAAU;IACP,OAAOV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;MAACC,GAAG,EAAEA,GAAG,CAACY;IAAV,CAArB,CAAP;EACH;AACJ,CA7BD"},"metadata":{},"sourceType":"module"}