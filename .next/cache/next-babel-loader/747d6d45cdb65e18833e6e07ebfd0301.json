{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Orders from '../../../models/orderModel';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createOrder(req, res);\n      break;\n\n    case \"GET\":\n      await getOrders(req, res);\n      break;\n  }\n});\n\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n\n    if (result.role !== 'admin') {\n      orders = await Orders.find({\n        user: result.id\n      }).populate(\"user\", \"-password\");\n    } else {\n      orders = await Orders.find().populate(\"user\", \"-password\");\n    }\n\n    res.json({\n      orders\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    const newOrder = new Orders({\n      user: result.id,\n      address,\n      mobile,\n      cart,\n      total\n    });\n    cart.filter(item => {\n      return sold(item._id, item.quantity, item.inStock, item.sold);\n    });\n    await newOrder.save();\n    res.json({\n      msg: 'Order success! We will contact you to confirm the order.',\n      newOrder\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst sold = async (id, quantity, oldInStock, oldSold) => {\n  await Products.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldSold\n  });\n};","map":{"version":3,"names":["connectDB","Orders","Products","auth","req","res","method","createOrder","getOrders","result","orders","role","find","user","id","populate","json","err","status","message","address","mobile","cart","total","body","newOrder","filter","item","sold","_id","quantity","inStock","save","msg","oldInStock","oldSold","findOneAndUpdate"],"sources":["C:/Users/DELL/Desktop/nextjs-ecommerce-master/pages/api/order/index.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Orders from '../../../models/orderModel'\nimport Products from '../../../models/productModel'\nimport auth from '../../../middleware/auth'\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"POST\":\n            await createOrder(req, res)\n            break;\n        case \"GET\":\n            await getOrders(req, res)\n            break;\n    }\n}\n\nconst getOrders = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n\n        let orders;\n        if(result.role !== 'admin'){\n            orders = await Orders.find({user: result.id}).populate(\"user\", \"-password\")\n        }else{\n            orders = await Orders.find().populate(\"user\", \"-password\")\n        }\n\n        res.json({orders})\n    } catch (err) {\n        return res.status(500).json({err: err.message})\n    }\n}\n\nconst createOrder = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        const { address, mobile, cart, total } = req.body\n\n        const newOrder = new Orders({\n            user: result.id, address, mobile, cart, total\n        })\n\n        cart.filter(item => {\n            return sold(item._id, item.quantity, item.inStock, item.sold)\n        })\n\n        await newOrder.save()\n\n        res.json({\n            msg: 'Order success! We will contact you to confirm the order.',\n            newOrder\n        })\n\n    } catch (err) {\n        return res.status(500).json({err: err.message})\n    }\n}\n\nconst sold = async (id, quantity, oldInStock, oldSold) => {\n    await Products.findOneAndUpdate({_id: id}, {\n        inStock: oldInStock - quantity,\n        sold: quantity + oldSold\n    })\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;EAC/B,QAAOD,GAAG,CAACE,MAAX;IACI,KAAK,MAAL;MACI,MAAMC,WAAW,CAACH,GAAD,EAAMC,GAAN,CAAjB;MACA;;IACJ,KAAK,KAAL;MACI,MAAMG,SAAS,CAACJ,GAAD,EAAMC,GAAN,CAAf;MACA;EANR;AAQH,CATD;;AAWA,MAAMG,SAAS,GAAG,OAAOJ,GAAP,EAAYC,GAAZ,KAAoB;EAClC,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;IAEA,IAAIK,MAAJ;;IACA,IAAGD,MAAM,CAACE,IAAP,KAAgB,OAAnB,EAA2B;MACvBD,MAAM,GAAG,MAAMT,MAAM,CAACW,IAAP,CAAY;QAACC,IAAI,EAAEJ,MAAM,CAACK;MAAd,CAAZ,EAA+BC,QAA/B,CAAwC,MAAxC,EAAgD,WAAhD,CAAf;IACH,CAFD,MAEK;MACDL,MAAM,GAAG,MAAMT,MAAM,CAACW,IAAP,GAAcG,QAAd,CAAuB,MAAvB,EAA+B,WAA/B,CAAf;IACH;;IAEDV,GAAG,CAACW,IAAJ,CAAS;MAACN;IAAD,CAAT;EACH,CAXD,CAWE,OAAOO,GAAP,EAAY;IACV,OAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;MAACC,GAAG,EAAEA,GAAG,CAACE;IAAV,CAArB,CAAP;EACH;AACJ,CAfD;;AAiBA,MAAMZ,WAAW,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;EACpC,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAD,EAAMC,GAAN,CAAzB;IACA,MAAM;MAAEe,OAAF;MAAWC,MAAX;MAAmBC,IAAnB;MAAyBC;IAAzB,IAAmCnB,GAAG,CAACoB,IAA7C;IAEA,MAAMC,QAAQ,GAAG,IAAIxB,MAAJ,CAAW;MACxBY,IAAI,EAAEJ,MAAM,CAACK,EADW;MACPM,OADO;MACEC,MADF;MACUC,IADV;MACgBC;IADhB,CAAX,CAAjB;IAIAD,IAAI,CAACI,MAAL,CAAYC,IAAI,IAAI;MAChB,OAAOC,IAAI,CAACD,IAAI,CAACE,GAAN,EAAWF,IAAI,CAACG,QAAhB,EAA0BH,IAAI,CAACI,OAA/B,EAAwCJ,IAAI,CAACC,IAA7C,CAAX;IACH,CAFD;IAIA,MAAMH,QAAQ,CAACO,IAAT,EAAN;IAEA3B,GAAG,CAACW,IAAJ,CAAS;MACLiB,GAAG,EAAE,0DADA;MAELR;IAFK,CAAT;EAKH,CAnBD,CAmBE,OAAOR,GAAP,EAAY;IACV,OAAOZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;MAACC,GAAG,EAAEA,GAAG,CAACE;IAAV,CAArB,CAAP;EACH;AACJ,CAvBD;;AAyBA,MAAMS,IAAI,GAAG,OAAOd,EAAP,EAAWgB,QAAX,EAAqBI,UAArB,EAAiCC,OAAjC,KAA6C;EACtD,MAAMjC,QAAQ,CAACkC,gBAAT,CAA0B;IAACP,GAAG,EAAEf;EAAN,CAA1B,EAAqC;IACvCiB,OAAO,EAAEG,UAAU,GAAGJ,QADiB;IAEvCF,IAAI,EAAEE,QAAQ,GAAGK;EAFsB,CAArC,CAAN;AAIH,CALD"},"metadata":{},"sourceType":"module"}